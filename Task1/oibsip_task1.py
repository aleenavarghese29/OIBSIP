# -*- coding: utf-8 -*-
"""Task 1 - Iris Flower Classification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vkK8hIuTm5BjQoiOPp-h8Pwe7TXVDloQ

# **Install and Import required libraries**
"""

import pandas as pd  # For handling datasets
import numpy as np  # For numerical operations
import seaborn as sns  # For data visualization
import matplotlib.pyplot as plt  # For plotting graphs

# Machine Learning libraries
from sklearn.model_selection import train_test_split  # For splitting data
from sklearn.preprocessing import StandardScaler  # For normalizing data
from sklearn.ensemble import RandomForestClassifier  # ML model
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix  # Model evaluation

"""# **Load the Iris Dataset**"""

df = pd.read_csv("https://raw.githubusercontent.com/amankharwal/Website-data/master/IRIS.csv")
df

"""# **Explore and Visualize the Data**"""

#first five rows of dataset
print(df.head())

#dataset info
df.info()

#descriptive statistics of dataset
df.describe()

#check class distribution
print(df['species'].value_counts())

#target labels
print("Target Labels",df['species'].unique())

"""# **Visualize relationships between features**"""

sns.pairplot(df, hue="species", diag_kind="kde")
plt.show()

#plot the data using a scatter plot which will plot the iris species according to the sepal length and sepal width
import plotly.express as px
fig = px.scatter(df, x="sepal_width", y="sepal_length", color="species")
fig.show()

"""# **Prepare Data for Machine Learning**"""

#Seperate Features and Target
x = df.drop(columns="species") #features
y = df["species"] #target variable

#Split Data into Training and Testing Sets
X_train, X_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=42)

#Normalize the Features
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# **Train a Machine Learning Model**"""

#Train a Random Forest Model
rf = RandomForestClassifier(random_state=42)
rf.fit(X_train, y_train)

"""### **Get Feature Importance**"""

# Get feature importance scores
feature_importance = rf.feature_importances_

# Get feature names from the original DataFrame 'x'
features = x.columns #x is the original DataFrame


# Create a DataFrame to organize the features and their importance
feature_importance_df = pd.DataFrame({
    "Feature": features,
    "Importance": feature_importance
})

# Sort the features by importance in descending order
feature_importance_df = feature_importance_df.sort_values(by="Importance", ascending=False)

# Print the feature importance
print(feature_importance_df)

"""### **Plot Feature Importance**"""

#Using Seaborn to Plot Feature Importance
import seaborn as sns
import matplotlib.pyplot as plt

# Plot the feature importance using a bar plot
plt.figure(figsize=(8, 6))
sns.barplot(x="Importance", y="Feature", data=feature_importance_df,hue="Feature",legend=False)
plt.xlabel("Importance")
plt.ylabel("Feature")


# Add title and show the plot
plt.title("Feature Importance in Iris Flower Classification")
plt.show()

"""# **Evaluate Model's Performance**

## **Make Predictions**
"""

y_pred = model.predict(X_test)  # Predict species for test data

"""## **Evaluate the Model**"""

#check accuracy
accuracy = accuracy_score(y_test, y_pred)
print("Accuracy:", accuracy)

#Detailed performance report
print("Classification Report:\n", classification_report(y_test, y_pred))

#confusion matrix
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""# **Test with a New Flower Measurement**"""

sample = np.array([[5.1, 3.5, 1.4, 0.2]])  # Example flower measurements
# Convert sample to DataFrame with correct column names
sample_df = pd.DataFrame(sample, columns=x.columns) #x is the original DataFrame
sample = scaler.transform(sample_df)  # Normalize data
prediction = model.predict(sample)

# Get species name
species_name = prediction[0]
print("Predicted species:", species_name)